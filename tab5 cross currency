def tab5_cross_currency(df, df_summary, ROLL_WINDOW, create_sequences):
    st.header("🔄 Cross-Currency Thresholds (Synthetic FX)")

    st.markdown("""
    This module analyzes volatility for cross-currency pairs constructed as:  
    `Cross = BaseUSD / QuoteUSD`  
    It compares:
    - 🔴 Manual Thresholds (max of legs)  
    - 🟠 Rolling Statistical Thresholds  
    - 🔵 Forecast-Based Confidence Bands (ML-style)
    """)

    simulate_spike = st.checkbox("🔁 Simulate Spike in Base Leg", value=False)

    method_options = ["95th Percentile", "Rolling StdDev", "Z-Score", "Mahalanobis Distance"]
    selected_method = st.selectbox("Select Dynamic Method", method_options, key="tab5_method")

    currencies = df["Currency"].unique().tolist()
    cross_pairs = [(f"{b}{q}", b, q) for b in currencies for q in currencies if b != q]
    pair_labels = [f"{p[0]} = {p[1]}USD ÷ {p[2]}USD" for p in cross_pairs]
    pair_choice = st.selectbox("Select Cross Pair", pair_labels, index=None)

    if pair_choice:
        pair_name, base_ccy, quote_ccy = cross_pairs[pair_labels.index(pair_choice)]
        base_df = df[df["Currency"] == base_ccy][["Date", "Close"]].copy()
        quote_df = df[df["Currency"] == quote_ccy][["Date", "Close"]].copy()

        if simulate_spike and len(base_df) > 75:
            base_df.iloc[-5:, base_df.columns.get_loc("Close")] += 1.5
            st.warning("⚠️ Spike injected in Base Leg Close (last 5 days)")

        merged = pd.merge(base_df, quote_df, on="Date", suffixes=(f"_{base_ccy}", f"_{quote_ccy}")).dropna()
        merged["SyntheticRate"] = merged[f"Close_{base_ccy}"] / merged[f"Close_{quote_ccy}"]
        merged["LogReturn"] = np.log(merged["SyntheticRate"]).diff()
        merged["CrossVolatility"] = merged["LogReturn"].rolling(ROLL_WINDOW, min_periods=ROLL_WINDOW).std() * np.sqrt(252)

        df_thresh = df_summary.set_index("Currency")
        manual_cross = max(df_thresh.loc[base_ccy.upper(), "ManualThreshold"],
                           df_thresh.loc[quote_ccy.upper(), "ManualThreshold"])

        # Dynamic threshold logic
        if selected_method == "95th Percentile":
            merged["DynamicThreshold"] = merged["CrossVolatility"].rolling(ROLL_WINDOW).quantile(0.95)
        elif selected_method == "Rolling StdDev":
            mu = merged["CrossVolatility"].rolling(ROLL_WINDOW).mean()
            sigma = merged["CrossVolatility"].rolling(ROLL_WINDOW).std()
            merged["DynamicThreshold"] = mu + 1.96 * sigma
        elif selected_method == "Z-Score":
            z = zscore(merged["CrossVolatility"].dropna())
            z_thresh = pd.Series(np.where(z > 2.5, merged["CrossVolatility"].dropna(), np.nan),
                                 index=merged["CrossVolatility"].dropna().index)
            merged["DynamicThreshold"] = z_thresh.reindex(merged.index).ffill()
        elif selected_method == "Mahalanobis Distance":
            distances = []
            for i in range(ROLL_WINDOW, len(merged)):
                window = merged["CrossVolatility"].iloc[i-ROLL_WINDOW:i].values.reshape(-1, 1)
                try:
                    cov = EmpiricalCovariance().fit(window)
                    dist = cov.mahalanobis(window)[-1]
                except:
                    dist = np.nan
                distances.append(dist)
            merged["DynamicThreshold"] = pd.Series([np.nan]*ROLL_WINDOW + distances, index=merged.index)
        else:
            merged["DynamicThreshold"] = np.nan

        # ML-style forecast bands
        vol_series = merged["CrossVolatility"].dropna().values.reshape(-1, 1)
        if len(vol_series) > ROLL_WINDOW + 1:
            X_seq, y_seq = create_sequences(vol_series, window=ROLL_WINDOW)
            model = LinearRegression().fit(X_seq.reshape(X_seq.shape[0], -1), y_seq)
            preds = model.predict(X_seq.reshape(X_seq.shape[0], -1))
            resid_std = np.std(y_seq - preds)
            ci_upper = preds + 1.96 * resid_std
            ci_lower = preds - 1.96 * resid_std
            ci_dates = merged["Date"].iloc[-len(preds):]
        else:
            ci_upper = ci_lower = ci_dates = None
            st.warning("⚠️ Not enough data for forecast confidence bands.")

        # Flag breaches
        merged["Breach_Manual"] = merged["CrossVolatility"] > manual_cross
        merged["Breach_Dynamic"] = merged["CrossVolatility"] > merged["DynamicThreshold"]
        if ci_upper is not None:
            merged["ForecastUpper"] = np.nan
            merged["ForecastLower"] = np.nan
            merged.loc[ci_dates, "ForecastUpper"] = ci_upper
            merged.loc[ci_dates, "ForecastLower"] = ci_lower
            merged["ForecastBreach"] = (merged["CrossVolatility"] > merged["ForecastUpper"]) | \
                                       (merged["CrossVolatility"] < merged["ForecastLower"])

        # Plot
        fig = go.Figure()
        fig.add_trace(go.Scatter(x=merged["Date"], y=merged["CrossVolatility"], name="Synthetic Vol", line=dict(color="white")))
        fig.add_trace(go.Scatter(x=merged["Date"], y=merged["DynamicThreshold"], name=f"{selected_method} Threshold", line=dict(color="orange", dash="dash")))
        fig.add_hline(y=manual_cross, line_color="red", line_dash="dot", annotation_text="Manual Threshold")

        if ci_upper is not None:
            fig.add_trace(go.Scatter(x=ci_dates, y=ci_upper, name="Forecast Upper", line=dict(dash="dot", color="cyan")))
            fig.add_trace(go.Scatter(x=ci_dates, y=ci_lower, name="Forecast Lower", line=dict(dash="dot", color="cyan")))

        for col, label, color in [
            ("Breach_Manual", "Manual Breach", "red"),
            ("Breach_Dynamic", "Dynamic Breach", "orange"),
            ("ForecastBreach", "Forecast Breach", "yellow")
        ]:
            if col in merged.columns and merged[col].any():
                fig.add_trace(go.Scatter(x=merged[merged[col]]["Date"], y=merged[merged[col]]["CrossVolatility"],
                                         mode="markers", name=label,
                                         marker=dict(color=color, size=7, symbol="x")))

        fig.update_layout(title=f"{pair_name}: Synthetic Volatility & Thresholds",
                          xaxis_title="Date", yaxis_title="Annualized Volatility")
        st.plotly_chart(fig, use_container_width=True)

        st.markdown("### 📘 Snapshot Table")
        st.dataframe(merged[["Date", "SyntheticRate", "CrossVolatility", "DynamicThreshold",
                             "ForecastUpper", "ForecastLower", "Breach_Manual", "Breach_Dynamic", "ForecastBreach"]].tail(30),
                     use_container_width=True)

        st.markdown(f"""
        ### 🧾 Interpretation Summary
        - 🔴 **Manual Cross Threshold** = max({base_ccy}, {quote_ccy})  
        - 🟠 **Dynamic Threshold** = {selected_method}  
        - 🔵 **Forecast Band** = ±1.96 × residual std  
        - ✅ **Flags** = Breaches from manual, dynamic, or model-based bands  
        - ⚙️ Toggle simulated shock to test alert sensitivity  
        """)
