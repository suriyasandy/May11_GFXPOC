def tab5_cross_currency(df, df_summary, ROLL_WINDOW, create_sequences):
    st.header("🔄 Cross-Currency Thresholds (Synthetic FX)")

    st.markdown("""
    This module computes thresholds for cross-currency pairs using synthetic construction  
    based on BaseUSD / QuoteUSD. It supports:
    - 🟠 **Dynamic Thresholds** via rolling methods
    - 🔴 **Manual Thresholds** using max of base & quote leg thresholds
    - 🔵 **Confidence Bands** via residual-based prediction (forecast)
    """)

    method_options = ["95th Percentile", "Rolling StdDev", "Z-Score", "Mahalanobis Distance"]
    selected_method = st.selectbox("Select Dynamic Method", method_options, key="tab5_method")

    currencies = df["Currency"].unique().tolist()
    cross_pairs = [(f"{b}{q}", b, q) for b in currencies for q in currencies if b != q]
    pair_labels = [f"{p[0]} = {p[1]}USD ÷ {p[2]}USD" for p in cross_pairs]
    pair_choice = st.selectbox("Select Cross Pair", pair_labels, index=None)

    if pair_choice:
        pair_name, base_ccy, quote_ccy = cross_pairs[pair_labels.index(pair_choice)]

        try:
            base_df = df[df["Currency"] == base_ccy][["Date", "Close"]].copy()
            quote_df = df[df["Currency"] == quote_ccy][["Date", "Close"]].copy()

            merged = pd.merge(base_df, quote_df, on="Date", suffixes=(f"_{base_ccy}", f"_{quote_ccy}")).dropna()
            merged["SyntheticRate"] = merged[f"Close_{base_ccy}"] / merged[f"Close_{quote_ccy}"]
            merged["LogReturn"] = np.log(merged["SyntheticRate"]).diff()
            merged["CrossVolatility"] = merged["LogReturn"].rolling(ROLL_WINDOW, min_periods=ROLL_WINDOW).std() * np.sqrt(252)

            df_thresh = df_summary.set_index("Currency")
            base_thresh = df_thresh.loc[base_ccy.upper(), "ManualThreshold"]
            quote_thresh = df_thresh.loc[quote_ccy.upper(), "ManualThreshold"]
            manual_cross = max(base_thresh, quote_thresh)

            # Dynamic threshold logic
            if selected_method == "95th Percentile":
                merged["DynamicThreshold"] = merged["CrossVolatility"].rolling(ROLL_WINDOW, min_periods=ROLL_WINDOW).quantile(0.95)

            elif selected_method == "Rolling StdDev":
                roll_mean = merged["CrossVolatility"].rolling(ROLL_WINDOW, min_periods=ROLL_WINDOW).mean()
                roll_std = merged["CrossVolatility"].rolling(ROLL_WINDOW, min_periods=ROLL_WINDOW).std()
                merged["DynamicThreshold"] = roll_mean + 1.96 * roll_std

            elif selected_method == "Z-Score":
                vol_series = merged["CrossVolatility"].dropna()
                zscores = zscore(vol_series)
                z_thresh = pd.Series(np.where(zscores > 2.5, vol_series, np.nan), index=vol_series.index)
                merged["DynamicThreshold"] = z_thresh.reindex(merged.index).ffill()

            elif selected_method == "Mahalanobis Distance":
                distances = []
                for i in range(ROLL_WINDOW, len(merged)):
                    window_data = merged["CrossVolatility"].iloc[i - ROLL_WINDOW:i].values.reshape(-1, 1)
                    try:
                        cov = EmpiricalCovariance().fit(window_data)
                        dist = cov.mahalanobis(window_data)[-1]
                    except:
                        dist = np.nan
                    distances.append(dist)
                merged["DynamicThreshold"] = pd.Series([np.nan]*ROLL_WINDOW + distances, index=merged.index)

            else:
                merged["DynamicThreshold"] = np.nan

            merged["Breach_Manual"] = merged["CrossVolatility"] > manual_cross
            merged["Breach_Dynamic"] = merged["CrossVolatility"] > merged["DynamicThreshold"]

            # Forecast-based CI bands
            vol_series = merged["CrossVolatility"].dropna().values.reshape(-1, 1)
            if len(vol_series) >= ROLL_WINDOW + 1:
                X_seq, y_seq = create_sequences(vol_series, window=ROLL_WINDOW)
                model = LinearRegression().fit(X_seq.reshape(X_seq.shape[0], -1), y_seq)
                preds = model.predict(X_seq.reshape(X_seq.shape[0], -1))
                residuals = y_seq - preds
                resid_std = np.std(residuals)
                ci_upper = preds + 1.96 * resid_std
                ci_lower = preds - 1.96 * resid_std
                ci_dates = merged["Date"].iloc[-len(preds):]

                merged["ForecastUpper"] = np.nan
                merged["ForecastLower"] = np.nan
                merged.loc[ci_dates, "ForecastUpper"] = ci_upper
                merged.loc[ci_dates, "ForecastLower"] = ci_lower
                merged["ForecastBreach"] = (merged["CrossVolatility"] > merged["ForecastUpper"]) | \
                                           (merged["CrossVolatility"] < merged["ForecastLower"])
            else:
                st.warning("⚠️ Not enough data to compute forecast bands.")
                merged["ForecastUpper"] = merged["ForecastLower"] = merged["ForecastBreach"] = np.nan

            # Plot
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=merged["Date"], y=merged["CrossVolatility"], name="Synthetic Volatility", line=dict(color="white")))
            fig.add_trace(go.Scatter(x=merged["Date"], y=merged["DynamicThreshold"], name=f"{selected_method} Threshold", line=dict(color="orange", dash="dash")))
            fig.add_hline(y=manual_cross, line_color="red", line_dash="dot", annotation_text="Manual Threshold")

            fig.add_trace(go.Scatter(x=merged["Date"], y=merged["ForecastUpper"], name="Forecast Upper", line=dict(color="cyan", dash="dot")))
            fig.add_trace(go.Scatter(x=merged["Date"], y=merged["ForecastLower"], name="Forecast Lower", line=dict(color="cyan", dash="dot")))

            fig.add_trace(go.Scatter(x=merged[merged["Breach_Manual"]]["Date"],
                                     y=merged[merged["Breach_Manual"]]["CrossVolatility"],
                                     mode="markers", name="Manual Breach", marker=dict(color="red", size=7)))
            fig.add_trace(go.Scatter(x=merged[merged["Breach_Dynamic"]]["Date"],
                                     y=merged[merged["Breach_Dynamic"]]["CrossVolatility"],
                                     mode="markers", name="Dynamic Breach", marker=dict(color="orange", size=8)))
            fig.add_trace(go.Scatter(x=merged[merged["ForecastBreach"]]["Date"],
                                     y=merged[merged["ForecastBreach"]]["CrossVolatility"],
                                     mode="markers", name="Forecast Breach", marker=dict(color="yellow", size=10, symbol="x")))

            fig.update_layout(
                title=f"{pair_name}: Synthetic Volatility with Multi-Layer Thresholds",
                xaxis_title="Date", yaxis_title="Annualized Volatility"
            )
            st.plotly_chart(fig, use_container_width=True)

            st.markdown("### 🔎 Snapshot Table")
            st.dataframe(merged[["Date", "SyntheticRate", "CrossVolatility", "DynamicThreshold", "ForecastUpper", "ForecastLower", "Breach_Manual", "Breach_Dynamic", "ForecastBreach"]].tail(30), use_container_width=True)

            st.markdown(f"""
            ### 🧾 Interpretation Summary

            - 🔴 **Manual Cross Threshold** = max({base_ccy}, {quote_ccy}) thresholds  
            - 🟠 **Dynamic Threshold** = {selected_method}-based rolling logic  
            - 🔵 **Forecast Band** = ML-based CI from linear model  
            - ✅ **Breach Escalation** if either or both thresholds are violated  
            """)
        except Exception as e:
            st.error(f"❌ Failed to compute cross pair stats: {e}")
