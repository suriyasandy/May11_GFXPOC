    st.header("📉 Prophet-Based Volatility Thresholding")
    tab1, tab2 = st.tabs(["Individual Currency", "Cross-Currency Pairs"])

    with tab1:
        selected_currency = st.selectbox("Select Currency", df["Currency"].unique(), key="tab6_vol_currency")
        test_days = st.slider("Test Window (days)", 10, 90, 30)

        df_cur = df[df["Currency"] == selected_currency].copy().sort_values("Date")
        df_cur["LogReturn"] = np.log(df_cur["Close"] / df_cur["Close"].shift(1))
        df_cur["Volatility"] = df_cur["LogReturn"].rolling(window=roll_window, min_periods=roll_window).std() * np.sqrt(252)
        df_vol = df_cur[["Date", "Volatility"]].dropna().rename(columns={"Date": "ds", "Volatility": "y"})

        if df_vol.empty or len(df_vol) < test_days + 50:
            st.warning("Not enough data. Reduce test window.")
            return

        df_train = df_vol[:-test_days]
        df_test = df_vol[-test_days:]
        future_test = df_test[["ds"]]

        st.markdown("🔍 Tuning Prophet...")
        param_grid = {
            "changepoint_prior_scale": [0.01, 0.1, 0.5],
            "seasonality_prior_scale": [1.0, 5.0, 10.0]
        }
        all_params = [dict(zip(param_grid, v)) for v in product(*param_grid.values())]
        best_mape, best_model, best_forecast = float("inf"), None, None

        for params in all_params:
            try:
                m = Prophet(interval_width=0.90, changepoint_prior_scale=params["changepoint_prior_scale"],
                            seasonality_prior_scale=params["seasonality_prior_scale"], daily_seasonality=False)
                m.fit(df_train)
                f = m.predict(future_test)
                mape = mean_absolute_percentage_error(df_test["y"], f["yhat"]) * 100
                if mape < best_mape:
                    best_mape, best_model, best_forecast = mape, m, f
                    best_params = params
            except: continue

        full_forecast = best_model.predict(df_vol[["ds"]])
        forecast_test = full_forecast.tail(test_days)
        forecast_train = full_forecast.iloc[:-test_days]

        y_true = df_test["y"].values
        y_pred = forecast_test["yhat"].values
        rmse = np.sqrt(mean_squared_error(y_true, y_pred))
        mae = mean_absolute_error(y_true, y_pred)
        benchmark_threshold = forecast_test["yhat_upper"].max()

        manual_thresh = df_summary[df_summary["Currency"] == selected_currency.upper()]["ManualThreshold"].values[0]
        flags = y_true > forecast_test["yhat_upper"].values
        flagged_dates = df_test["ds"].values[flags]
        flagged_vols = y_true[flags]
        flagged_ci = forecast_test["yhat_upper"].values[flags]
        flagged_dev = ((flagged_vols - flagged_ci) / flagged_ci) * 100

        st.success(f"✅ Best Params: {best_params} | MAPE: {best_mape:.2f}% | RMSE: {rmse:.4f} | MAE: {mae:.4f}")

        fig = go.Figure()
        fig.add_trace(go.Scatter(x=df_vol["ds"], y=df_vol["y"], name="Actual", line=dict(color="gray")))
        fig.add_trace(go.Scatter(x=forecast_train["ds"], y=forecast_train["yhat"], name="Forecast (Train)", line=dict(color="blue")))
        fig.add_trace(go.Scatter(x=forecast_train["ds"], y=forecast_train["yhat_upper"], name="Upper CI (Train)", line=dict(color="lightblue", dash="dot")))
        fig.add_trace(go.Scatter(x=forecast_test["ds"], y=forecast_test["yhat"], name="Forecast (Test)", line=dict(color="orange")))
        fig.add_trace(go.Scatter(x=forecast_test["ds"], y=forecast_test["yhat_upper"], name="Upper CI (Test)", line=dict(color="lightsalmon", dash="dot")))
        fig.add_hline(y=manual_thresh, line_color="red", line_dash="dash", annotation_text="Manual Threshold")
        fig.add_hline(y=benchmark_threshold, line_color="orange", line_dash="dot", annotation_text="Monthly Benchmark Threshold")
        # Add shaded region for benchmark threshold
        fig.add_shape(
            type="rect",
            x0=df_test["ds"].min(), x1=df_test["ds"].max(),
            y0=benchmark_threshold, y1=benchmark_threshold * 1.02,
            fillcolor="orange", opacity=0.2, line_width=0,
            layer="below"
        )

        fig.add_trace(go.Scatter(x=flagged_dates, y=flagged_vols, mode="markers", name="Breach",
                                 marker=dict(color="red", symbol="x", size=9),
                                 text=[f"Deviation: {d:.2f}%" for d in flagged_dev], hoverinfo="text+x+y"))
        fig.add_vrect(x0=df_test["ds"].min(), x1=df_test["ds"].max(), fillcolor="orange", opacity=0.08, layer="below", line_width=0)
        fig.update_layout(title=f"{selected_currency}: Prophet Forecast with Thresholds", height=600)
        st.plotly_chart(fig, use_container_width=True)
